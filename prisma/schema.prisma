generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Grade {
  id            String          @id @default(cuid())
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  code          String          @unique
  alumClasses   AlumClass[]
  accessRequest AccessRequest[]

  @@map("grades")
}

model AlumClass {
  id            String          @id @default(cuid())
  gradeId       String          @map("grade_id")
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  name          String
  description   String?
  grade         Grade           @relation(fields: [gradeId], references: [id])
  informations  Information[]
  accessRequest AccessRequest[]

  @@map("alum_classes")
}

model Alumni {
  id           String @id @default(cuid())
  tenantId     String @map("tenant_id")
  accountId    String @map("account_id") @unique
  accountEmail String @map("account_email")

  accessLevel  AccessLevel  @default(ALUMNI) @map("access_level")
  accessStatus AccessStatus @default(PENDING) @map("access_status")

  archived    Boolean      @default(false)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  information Information?

  @@map("alumni")
}

model AccessRequest {
  id          String  @id @default(cuid())
  fullName    String
  userId      String  @map("user_id")
  gradeId     String  @map("grade_id")
  alumClassId String  @map("alum_class_id")
  isApproved  Boolean @map("is_approved")

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  grade     Grade     @relation(fields: [gradeId], references: [id])
  alumClass AlumClass @relation(fields: [alumClassId], references: [id])

  @@map("access_requests")
}

model Information {
  id                   String             @id @default(cuid())
  bio                  String?
  fullName             String?
  avatarUrl            String?            @map("avatar_url")
  coverImageUrl        String?            @map("cover_image_url")
  email                String             @unique @map("email")
  phone                String?
  phonePublicity       ScopePublicity     @default(PRIVATE) @map("phone_publicity")
  facebookUrl          String?            @map("facebook_url")
  facebookPublicity    ScopePublicity     @default(PRIVATE) @map("facebook_publicity")
  dateOfBirth          DateTime?          @map("date_of_birth")
  dateOfBirthPublicity ScopePublicity     @default(PRIVATE) @map("date_of_birth_publicity")
  alumClassId          String?            @map("alum_class_id")
  userId               String             @unique
  careerPublicity      ScopePublicity     @default(PRIVATE) @map("career_publicity")
  educationPublicity   ScopePublicity     @default(PRIVATE) @map("education_publicity")
  alumClass            AlumClass?         @relation(fields: [alumClassId], references: [id])
  events               Event[]
  eventParticipants    EventParticipant[]
  eventInterests       EventInterest[]
  News                 News[]
  NewsComment          NewsComment[]
  fund                 Fund[]
  fundSaved            FundSaved[]
  Recruitment          Recruitment[]

  posts                  Post[]
  postComments           PostComment[]
  postLikes              PostLike[]
  RecruitmentApplication RecruitmentApplication[]
  fundTransactions       FundTransaction[]
  FundReport             FundReport[]
  ping                   Ping[]

  alumni Alumni @relation(fields: [userId], references: [accountId])

  @@map("informations")
}

model Career {
  id        String    @id @default(cuid())
  jobTitle  String    @map("job_title")
  company   String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  userId    String    @map("user_id")
  archived  Boolean   @default(false)

  @@map("careers")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  archived  Boolean   @default(false)
  userId    String    @map("user_id")

  @@map("educations")
}

model News {
  id           String        @id @default(cuid())
  archived     Boolean       @default(false)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  title        String
  content      String
  authorId     String        @map("author_id")
  newsImageUrl String?       @map("news_image_url")
  isPublic     Boolean       @default(false) @map("is_public")
  NewsComment  NewsComment[]
  authorInfoId String?       @map("author_info_id")
  tagsNews     TagsNews[]    @relation("news_to_tag_news")

  authorInfo Information? @relation(fields: [authorInfoId], references: [id])

  @@map("news")
}

model NewsComment {
  id              String   @id @default(cuid())
  archived        Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  commentContent  String   @map("comment_content")
  commenterId     String   @map("commenter_id")
  commenterInfoId String?  @map("commenter_info_id")
  newsId          String   @map("news_id")

  news          News         @relation(fields: [newsId], references: [id])
  commenterInfo Information? @relation(fields: [commenterInfoId], references: [id])

  @@map("news_comment")
}

model Event {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title             String
  backgroundImage   String?
  description       String?
  isOffline         Boolean     @default(false) @map("is_offline")
  location          String?
  startTime         DateTime    @default(now()) @map("start_time")
  endTime           DateTime?   @map("end_time")
  isEnded           Boolean     @default(false) @map("is_ended")
  approvedStatus    Int         @default(-1) @map("approved_status")
  publicity         AccessLevel @default(ALUMNI)
  publicParticipant Boolean     @default(false) @map("public_participant")

  userId          String      @map("user_id")
  hostInformation Information @relation(fields: [userId], references: [userId])

  eventParticipants EventParticipant[]
  eventInterests    EventInterest[]

  @@map("events")
}

model EventParticipant {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  userId                 String
  participantInformation Information @relation(fields: [userId], references: [userId])

  @@map("event_participants")
}

model EventInterest {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  userId          String
  userInformation Information @relation(fields: [userId], references: [userId])

  @@map("event_interests")
}

model Fund {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title             String
  description       String?
  startTime         DateTime    @default(now()) @map("start_time")
  endTime           DateTime?   @default(now()) @map("end_time")
  targetBalance     Int         @default(0) @map("target_balance")
  currentBalance    Int         @default(0) @map("currect_balance")
  publicity         AccessLevel @default(ALUMNI)
  publicParticipant Boolean     @default(false) @map("public_participant")

  userId          String      @map("user_id")
  hostInformation Information @relation(fields: [userId], references: [userId])

  fundSaved        FundSaved[]
  fundTransactions FundTransaction[]
  FundReport       FundReport[]

  @@map("funds")
}

model FundSaved {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  fundId String @map("fund_id")
  fund   Fund   @relation(fields: [fundId], references: [id])

  userId          String      @map("user_id")
  userInformation Information @relation(fields: [userId], references: [userId])

  @@map("fund_saved")
}

model FundTransaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  vnp_Version    String  @map("vpn_version")
  vnp_Command    String  @map("vnp_commnad")
  vnp_TmnCode    String  @map("vnp_tmn_code")
  vnp_Amount     Int     @map("vnp_amount")
  vnp_BankCode   String? @map("vnp_bank_code")
  vnp_CreateDate String  @map("vnp_create_date")
  vnp_CurrCode   String  @map("vnp_CurrCode")
  vnp_IpAddr     String  @map("vnp_ip_addr")
  vnp_Locale     String  @map("vnp_locale")
  vnp_OrderInfo  String  @map("vnp_order_info")
  vnp_OrderType  String  @map("vpn_order_type")
  vnp_TxnRef     String  @unique @map("vnp_txn_ref")

  vnp_TransactionNo     String? @map("vnp_transaction_no")
  vnp_ResponseCode      String? @map("vnp_response_code")
  vnp_TransactionStatus String? @map("vnp_transaction_status")

  paymentStatus Int     @default(0) @map("payment_status")
  incognito     Boolean @default(false)

  fundId          String      @map("fund_id")
  userId          String      @map("user_id")
  fund            Fund        @relation(fields: [fundId], references: [id])
  userInformation Information @relation(fields: [userId], references: [userId])

  @@map("fund_transactions")
}

model FundReport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  archived  Boolean  @default(false)

  title   String
  content String?

  fundId String @map("fund_id")
  userId String @map("user_id")

  fund            Fund        @relation(fields: [fundId], references: [id])
  userInformation Information @relation(fields: [userId], references: [userId])

  @@map("fund_reports")
}

model Post {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  content   String
  publicity AccessLevel @default(ALUMNI)

  authorId          String      @map("author_id")
  authorInformation Information @relation(fields: [authorId], references: [userId])

  postComments PostComment[]
  postLikes    PostLike[]

  @@map("posts")
}

model PostComment {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  content String

  authorId String @map("author_id")
  postId   String @map("post_id")

  authorInformation Information @relation(fields: [authorId], references: [userId])
  post              Post        @relation(fields: [postId], references: [id])

  @@map("post_comments")
}

model PostLike {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  authorId String @map("author_id")
  postId   String @map("post_id")

  authorInformation Information @relation(fields: [authorId], references: [userId])
  post              Post        @relation(fields: [postId], references: [id])

  @@unique([authorId, postId])
  @@map("post_likes")
}

model Recruitment {
  id                     String                   @id @default(cuid())
  archived               Boolean                  @default(false)
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  companyName            String                   @map("company_name")
  companyImageUrl        String?                  @map("company_image_url")
  website                String?
  job                    String
  address                String
  position               String
  title                  String
  description            String?
  type                   String?
  startAt                DateTime?                @map("start_at")
  expiredAt              DateTime?                @map("expired_at")
  salary                 String                   @default("negotiate")
  isApproved             Boolean                  @default(false)
  recruitmentOwnerId     String?                  @map("recruitment_owner_id")
  recruitmentOwnerInfoId String?                  @map("recruitment_owner_info_id")
  recruitmentOwnerInfo   Information?             @relation(fields: [recruitmentOwnerInfoId], references: [id])
  RecruitmentApplication RecruitmentApplication[]

  @@map("recruitments")
}

model RecruitmentApplication {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  resumeUrl String? @map("resume_url")

  recruitmentId String
  recruitment   Recruitment @relation(fields: [recruitmentId], references: [id])

  applicationOwnerId   String
  applicationOwnerInfo Information @relation(fields: [applicationOwnerId], references: [userId])

  @@map("recruitment_applications")
}

model TagsNews {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tagName String @unique @map("tag_name")
  news    News[] @relation("news_to_tag_news")

  @@map("tags_news")
}

model Ping {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  message String

  pingAlumniInfoId String
  pingerInfoId     String

  pingerInfo Information? @relation(fields: [pingerInfoId], references: [userId])

  @@map("pings")
}

enum AccessLevel {
  ALUMNI
  CLASS_MOD
  GRADE_MOD
  SCHOOL_ADMIN
}

enum AccessStatus {
  PENDING
  APPROVED
}

enum AccessMode {
  FULL_ACCESS
  READ_ONLY
}

enum ScopePublicity {
  PRIVATE
  CLASS
  GRADE
  SCHOOL
}
