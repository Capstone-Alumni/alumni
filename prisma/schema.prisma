generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Grade {
  id            String          @id @default(cuid())
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  code          String          @unique
  name          String
  alumClasses   AlumClass[]
  accessRequest AccessRequest[]

  @@map("grades")
}

model AlumClass {
  id            String          @id @default(cuid())
  gradeId       String          @map("grade_id")
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  name          String
  description   String?
  grade         Grade           @relation(fields: [gradeId], references: [id])
  informations  Information[]
  accessRequest AccessRequest[]

  @@map("alum_classes")
}

model AccessRequest {
  id          String @id @default(cuid())
  fullName    String
  userId      String @map("user_id")
  gradeId     String @map("grade_id")
  alumClassId String @map("alum_class_id")

  isApproved Boolean @map("is_approved")

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  grade     Grade     @relation(fields: [gradeId], references: [id])
  alumClass AlumClass @relation(fields: [alumClassId], references: [id])

  @@map("access_requests")
}

model Information {
  id                   String         @id @default(cuid())
  bio                  String?
  fullName             String?
  avatarUrl            String?        @map("avatar_url")
  coverImageUrl        String?        @map("cover_image_url")
  email                String         @unique @map("email")
  phone                String?
  phonePublicity       ScopePublicity @default(PRIVATE) @map("phone_publicity")
  facebookUrl          String?        @map("facebook_url")
  facebookPublicity    ScopePublicity @default(PRIVATE) @map("facebook_publicity")
  dateOfBirth          DateTime?      @map("date_of_birth")
  dateOfBirthPublicity ScopePublicity @default(PRIVATE) @map("date_of_birth_publicity")
  alumClassId          String?        @map("alum_class_id")
  userId               String         @unique
  careerPublicity      ScopePublicity @default(PRIVATE) @map("career_publicity")
  educationPublicity   ScopePublicity @default(PRIVATE) @map("education_publicity")
  alumClass            AlumClass?     @relation(fields: [alumClassId], references: [id])

  @@map("informations")
}

model Career {
  id        String    @id @default(cuid())
  jobTitle  String    @map("job_title")
  company   String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  userId    String    @map("user_id")
  archived  Boolean   @default(false)

  @@map("careers")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  archived  Boolean   @default(false)
  userId    String    @map("user_id")

  @@map("educations")
}

model News {
  id           String   @id @default(cuid())
  archived     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  title        String
  content      String
  authorId     String   @map("author_id")
  newsImageUrl String?   @map("news_image_url")
  isPublic     Boolean  @default(false) @map("is_public")

  @@map("news")
}

enum AccessLevel {
  ALUMNI
  CLASS_MOD
  GRADE_MOD
  SCHOOL_ADMIN
}

enum AccessStatus {
  PENDING
  APPROVED
}

enum AccessMode {
  FULL_ACCESS
  READ_ONLY
}

enum ScopePublicity {
  PRIVATE
  CLASS
  GRADE
  SCHOOL
}
