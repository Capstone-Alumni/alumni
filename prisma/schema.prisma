generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Grade {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  code      String? @unique
  startYear Int     @map("start_year")
  endYear   Int     @map("end_year")

  alumClasses AlumClass[]
  gradeMod    GradeMod[]
  post        Post[]

  @@unique([startYear, endYear])
  @@map("grades")
}

model AlumClass {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name String

  gradeId String @map("grade_id")
  grade   Grade  @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  accessRequest AccessRequest[]
  alumniToClass AlumniToClass[]
  post          Post[]

  @@unique([gradeId, name])
  @@map("alum_classes")
}

model AlumniToClass {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  isClassMod Boolean @default(false) @map("is_class_mod")

  alumClassId String    @map("alum_class_id")
  alumClass   AlumClass @relation(fields: [alumClassId], references: [id], onDelete: Cascade)
  alumniId    String    @map("alumni_id")
  alumni      Alumni    @relation(fields: [alumniId], references: [id], onDelete: Cascade)

  @@unique([alumClassId, alumniId])
  @@map("alumni_to_class")
}

model GradeMod {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  gradeId  String @map("alum_class_id")
  grade    Grade  @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  alumniId String @map("alumni_id")
  alumni   Alumni @relation(fields: [alumniId], references: [id], onDelete: Cascade)

  @@unique([gradeId, alumniId])
  @@map("grade_mods")
}

model Alumni {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tenantId  String  @map("tenant_id")
  accountId String? @unique @map("account_id")

  information Information?

  alumniToClass          AlumniToClass[]
  gradeMod               GradeMod[]
  accessRequest          AccessRequest[]
  career                 Career[]
  education              Education[]
  news                   News[]
  newsComment            NewsComment[]
  event                  Event[]
  eventParticipant       EventParticipant[]
  eventInterest          EventInterest[]
  fund                   Fund[]
  fundSaved              FundSaved[]
  fundTransaction        FundTransaction[]
  post                   Post[]
  postComment            PostComment[]
  postLike               PostLike[]
  recruitment            Recruitment[]
  recruitmentApplication RecruitmentApplication[]
  pingReceived           Ping[]                   @relation("ping_alumni")
  pingSent               Ping[]                   @relation("pinger")

  @@map("alumni")
}

model AccessRequest {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  fullName    String    @map("full_name")
  phone       String?
  dateOfBirth DateTime? @map("date_of_birth")

  email    String
  password String?

  requestStatus Int @default(0) @map("request_status")

  alumClassId String    @map("alum_class_id")
  alumClass   AlumClass @relation(fields: [alumClassId], references: [id], onDelete: Cascade)

  alumniId String? @map("alumni_id") // có: register, không có: joinClass
  alumni   Alumni? @relation(fields: [alumniId], references: [id], onDelete: Cascade)

  @@map("access_requests")
}

model Information {
  id            String  @id @default(cuid())
  bio           String?
  fullName      String  @map("full_name")
  avatarUrl     String? @map("avatar_url")
  coverImageUrl String? @map("cover_image_url")
  email         String? @unique @map("email")

  phone                String?
  phonePublicity       ScopePublicity @default(PRIVATE) @map("phone_publicity")
  facebookUrl          String?        @map("facebook_url")
  facebookPublicity    ScopePublicity @default(PRIVATE) @map("facebook_publicity")
  dateOfBirth          DateTime?      @map("date_of_birth")
  dateOfBirthPublicity ScopePublicity @default(PRIVATE) @map("date_of_birth_publicity")
  careerPublicity      ScopePublicity @default(PRIVATE) @map("career_publicity")
  educationPublicity   ScopePublicity @default(PRIVATE) @map("education_publicity")

  alumniId String  @unique @map("alumni_id")
  alumni   Alumni? @relation(fields: [alumniId], references: [id], onDelete: Cascade)

  @@map("informations")
}

model Career {
  id        String    @id @default(cuid())
  jobTitle  String    @map("job_title")
  company   String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  archived  Boolean   @default(false)

  alumniId String @map("alumni_id")
  alumni   Alumni @relation(fields: [alumniId], references: [id])

  @@map("careers")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")
  archived  Boolean   @default(false)

  alumniId String @map("alumni_id")
  alumni   Alumni @relation(fields: [alumniId], references: [id])

  @@map("educations")
}

model News {
  id           String        @id @default(cuid())
  archived     Boolean       @default(false)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  title        String
  content      String
  newsImageUrl String?       @map("news_image_url")
  isPublic     Boolean       @default(false) @map("is_public")

  newsComment  NewsComment[]
  tagsNews     TagsNews[]    @relation("news_to_tag_news")

  authorId String  @map("author_id")
  author   Alumni? @relation(fields: [authorId], references: [id])

  @@map("news")
}

model NewsComment {
  id             String   @id @default(cuid())
  archived       Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  commentContent String   @map("comment_content")

  newsId String @map("news_id")
  news   News   @relation(fields: [newsId], references: [id])

  commenterId String  @map("commenter_id")
  commenter   Alumni? @relation(fields: [commenterId], references: [id])

  @@map("news_comment")
}

model Event {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title             String
  backgroundImage   String?
  description       String?
  isOffline         Boolean     @default(false) @map("is_offline")
  location          String?
  startTime         DateTime    @default(now()) @map("start_time")
  endTime           DateTime?   @map("end_time")
  isEnded           Boolean     @default(false) @map("is_ended")
  approvedStatus    Int         @default(-1) @map("approved_status")
  publicity         AccessLevel @default(ALUMNI)
  publicParticipant Boolean     @default(false) @map("public_participant")

  hostId String @map("host_id")
  host   Alumni @relation(fields: [hostId], references: [id])

  eventParticipants EventParticipant[]
  eventInterests    EventInterest[]

  @@map("events")
}

model EventParticipant {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  participantId String @map("participant_id")
  participant   Alumni @relation(fields: [participantId], references: [id])

  @@map("event_participants")
}

model EventInterest {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  interesterId String
  interester   Alumni @relation(fields: [interesterId], references: [id])

  @@map("event_interests")
}

model Fund {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title             String
  description       String?
  startTime         DateTime    @default(now()) @map("start_time")
  endTime           DateTime?   @default(now()) @map("end_time")
  targetBalance     Int         @default(0) @map("target_balance")
  currentBalance    Int         @default(0) @map("currect_balance")
  publicity         AccessLevel @default(ALUMNI)
  publicParticipant Boolean     @default(false) @map("public_participant")

  hostId String @map("user_id")
  host   Alumni @relation(fields: [hostId], references: [id])

  fundSaved        FundSaved[]
  fundTransactions FundTransaction[]
  fundReport       FundReport[]

  @@map("funds")
}

model FundSaved {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  fundId String @map("fund_id")
  fund   Fund   @relation(fields: [fundId], references: [id])

  saverId String @map("saver_id")
  saver   Alumni @relation(fields: [saverId], references: [id])

  @@map("fund_saved")
}

model FundTransaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  vnp_Version    String  @map("vpn_version")
  vnp_Command    String  @map("vnp_commnad")
  vnp_TmnCode    String  @map("vnp_tmn_code")
  vnp_Amount     Int     @map("vnp_amount")
  vnp_BankCode   String? @map("vnp_bank_code")
  vnp_CreateDate String  @map("vnp_create_date")
  vnp_CurrCode   String  @map("vnp_CurrCode")
  vnp_IpAddr     String  @map("vnp_ip_addr")
  vnp_Locale     String  @map("vnp_locale")
  vnp_OrderInfo  String  @map("vnp_order_info")
  vnp_OrderType  String  @map("vpn_order_type")
  vnp_TxnRef     String  @unique @map("vnp_txn_ref")

  vnp_TransactionNo     String? @map("vnp_transaction_no")
  vnp_ResponseCode      String? @map("vnp_response_code")
  vnp_TransactionStatus String? @map("vnp_transaction_status")

  paymentStatus Int     @default(0) @map("payment_status")
  incognito     Boolean @default(false)

  fundId   String @map("fund_id")
  fund     Fund   @relation(fields: [fundId], references: [id])
  alumniId String @map("alumni_id")
  alumni   Alumni @relation(fields: [alumniId], references: [id])

  @@map("fund_transactions")
}

model FundReport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  archived  Boolean  @default(false)

  title   String
  content String?

  fundId String @map("fund_id")
  fund   Fund   @relation(fields: [fundId], references: [id])

  @@map("fund_reports")
}

model Post {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  content String

  gradeId        String?    @map("grade_id")
  grade          Grade?     @relation(fields: [gradeId], references: [id])
  alumClassId    String?    @map("alum_class_id")
  alumClass      AlumClass? @relation(fields: [alumClassId], references: [id])
  isPublicSchool Boolean    @default(false) @map("is_public_school")
  authorId       String     @map("author_id")
  author         Alumni     @relation(fields: [authorId], references: [id])

  postComments PostComment[]
  postLikes    PostLike[]

  @@map("posts")
}

model PostComment {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  content String

  postId   String @map("post_id")
  post     Post   @relation(fields: [postId], references: [id])
  authorId String @map("author_id")
  author   Alumni @relation(fields: [authorId], references: [id])

  @@map("post_comments")
}

model PostLike {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  postId   String @map("post_id")
  post     Post   @relation(fields: [postId], references: [id])
  authorId String @map("author_id")
  author   Alumni @relation(fields: [authorId], references: [id])

  @@unique([authorId, postId])
  @@map("post_likes")
}

model Recruitment {
  id              String    @id @default(cuid())
  archived        Boolean   @default(false)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  companyName     String    @map("company_name")
  companyImageUrl String?   @map("company_image_url")
  website         String?
  job             String
  address         String
  position        String
  title           String
  description     String?
  type            String?
  startAt         DateTime? @map("start_at")
  expiredAt       DateTime? @map("expired_at")
  salary          String    @default("negotiate")
  isApproved      Boolean   @default(false)

  recruitmentOwnerId     String                   @map("recruitment_owner_id")
  recruitmentOwner       Alumni                   @relation(fields: [recruitmentOwnerId], references: [id])
  recruitmentApplication RecruitmentApplication[]

  @@map("recruitments")
}

model RecruitmentApplication {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  resumeUrl String? @map("resume_url")

  recruitmentId String
  recruitment   Recruitment @relation(fields: [recruitmentId], references: [id])

  applicationOwnerId String
  applicationOwner   Alumni @relation(fields: [applicationOwnerId], references: [id])

  @@map("recruitment_applications")
}

model TagsNews {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tagName String @unique @map("tag_name")
  news    News[] @relation("news_to_tag_news")

  @@map("tags_news")
}

model Ping {
  id        String   @id @default(cuid())
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  message String

  pingAlumniId String
  pingAlumni   Alumni  @relation("ping_alumni", fields: [pingAlumniId], references: [id])
  pingerId     String
  pinger       Alumni? @relation("pinger", fields: [pingerId], references: [id])

  @@map("pings")
}

enum AccessLevel {
  ALUMNI
  CLASS_MOD
  GRADE_MOD
  SCHOOL_ADMIN
}

enum AccessStatus {
  PENDING
  APPROVED
}

enum AccessMode {
  FULL_ACCESS
  READ_ONLY
}

enum ScopePublicity {
  PRIVATE
  CLASS
  GRADE
  SCHOOL
}
